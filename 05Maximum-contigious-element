#include<bits/stdc++.h>
using namespace std;

#define pb push_back
#define mp make_pair
#define clr(x) x.clear()

#ifndef ONLINE_JUDGE
#define gc getchar
#else
#define gc getchar_unlocked
#endif

const int MOD=1e9+7;

typedef vector<int> vi;
typedef pair<int,int> ii;
typedef vector<ii> vii;
typedef vector<vii> vvii;
typedef long long LL;

int read_int()
{
    char c = gc();
    while(c<'0' || c>'9') c = gc();
    int ret = 0;
    while(c>='0' && c<='9')
    {
        ret = 10 * ret + c - 48;
        c = gc();
    }
    return ret;
}
//7/12/14
//shankul khare
//maximum contigious sum
//15:31
/*
struct node
{
    int data;
    node*left;
    node*right;
    //node*next;
};
node*NewNode(int data)
{
    //node*temp;
    node *temp=new node();
    temp->data=data;
    temp->left=NULL;
    temp->right=NULL;
    //temp->next=NULL;
    return temp;
}
node*lowest_commen_ancestor(node*alpha,node*beta,node*root)
{
    while(1)
    {
        if((alpha->data<root->data&&beta->data>root->data)||(alpha->data>root->data&&beta->data<root->data))
            return root;
        else if(alpha->data<root->data)
        {
            root=root->left;
        }
        else
        {
            root=root->right;
        }
    }
}
void print(node*root)
{
    if(root==NULL)
        return;
    print(root->left);
    cout<<root->data;
    print(root->right);
}*/
int Max_Contigious_Sum(int arr[],int n)
{
    int Max_sum[n];
    Max_sum[0]=arr[0];
    for(int i=1;i<n;i++)
    {
        Max_sum[i]=max(Max_sum[i-1],Max_sum[i-1]+arr[i]);
    }
    int Max=INT_MIN;
    for(int i=0;i<n;i++)
    {
        if(Max_sum[i]>Max)
            Max=Max_sum[i];
    }
    return Max;
}
int main()
{
    freopen("input.txt","r",stdin);
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    cout<<Max_Contigious_Sum(arr,n);
    return 0;
}
