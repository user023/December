#include<bits/stdc++.h>
using namespace std;

#define pb push_back
#define mp make_pair
#define clr(x) x.clear()

#ifndef ONLINE_JUDGE
#define gc getchar
#else
#define gc getchar_unlocked
#endif

const int MOD=1e9+7;

typedef vector<int> vi;
typedef pair<int,int> ii;
typedef vector<ii> vii;
typedef vector<vii> vvii;
typedef long long LL;

int read_int()
{
    char c = gc();
    while(c<'0' || c>'9') c = gc();
    int ret = 0;
    while(c>='0' && c<='9')
    {
        ret = 10 * ret + c - 48;
        c = gc();
    }
    return ret;
}
//1/12/14
//shankul khare
//BFS grapg directed
//00:40
/*
struct node
{
    int data;
    node*left;
    node*right;
    //node*next;
};
node*NewNode(int data)
{
    //node*temp;
    node *temp=new node();
    temp->data=data;
    temp->left=NULL;
    temp->right=NULL;
    //temp->next=NULL;
    return temp;
}
*/
void BFS(vector<vector<int> >vec,int n)
{
    bool arr[n];
    memset(arr,false,sizeof(arr));
    queue<int>qu;
    arr[0]=true;

    qu.push(0);
    while(!qu.empty())
    {
        cout<<qu.front();
        for(vector<int>::iterator it=vec[qu.front()].begin();it!=vec[qu.front()].end();it++)
        if(arr[*it]==false)
        {
            qu.push(*it);
            arr[*it]=true;
        }
        qu.pop();
    }
}
int main()
{

/*    node *A=NewNode(1);
    A->left=NewNode(2);
    A->left->left=NewNode(4);
    A->left->right=NewNode(5);
    A->left->right->left=NewNode(7);
    A->right=NewNode(3);
    A->right->left=NewNode(6);
    A->right->left->left=NewNode(8);
    node*B=NewNode(1);
    B->left=NewNode(5);
    B->left->right=NewNode(2);
    B->left->right->right=NewNode(4);
    B->right=NewNode(6);
    B->right->left=NewNode(8);
    B->right->left->right=NewNode(7);
    B->right->right=NewNode(3);

    //next_sibling(A);
    //print(A);
    cout<<isIsomorfic(A,B);
  */
  vector<vector<int> >g(4);
   g[0].push_back(1);
    g[0].push_back(2);
    g[1].push_back(2);
    g[2].push_back(0);
    g[2].push_back(3);
    g[3].push_back(3);
    BFS(g,3);
    return 0;
}
